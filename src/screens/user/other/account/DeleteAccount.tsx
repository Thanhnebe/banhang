import { View, Text, Image, TouchableOpacity } from 'react-native'
import React, { useState } from 'react'
import { useNavigation } from '@react-navigation/native'
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { StackHomeTypeParam } from '../../../../model/param/IndexStack.Param';
import { useAppSelector, useAppDispatch } from '../../../../import/IndexFeatures';
import { Logout } from '../../../../redux/slices/Auth.Slice';

import { Icon } from '../../../../constant/Icon'
import { CustomCheckBox, CustomHeader } from '../../../../import/IndexComponent'
import { IndexStyles } from '../../../../import/IndexStyles';
import { HandleDeleteUser } from '../../../../service/Api/IndexUser'
import ToastMessage from '../../../../utils/ToastMessage';
import { setItemCount } from '../../../../redux/slices/CountCartSlice';


const DeleteAccount: React.FC = () => {
    const navigation = useNavigation<NativeStackNavigationProp<StackHomeTypeParam, 'AuthUser'>>()
    const [checked, setChecked] = useState<boolean>(false);
    const id = useAppSelector(state => state.root.Auth.user._id)
    const dispatch = useAppDispatch()

    const HandleDeleteAccount = async () => {
        try {
            const response = await HandleDeleteUser(id)
            ToastMessage('success', 'X√≥a t√†i kho·∫£n th√†nh c√¥ng')
            navigation.navigate('AuthUser')
            dispatch(Logout())
            dispatch(setItemCount(0))
            console.log("üöÄ ~ HandleDeleteAccount ~ response", response)
        } catch (error) {
            console.log("üöÄ ~ HandleDeleteAccount ~ error", error)
        }
    }

    return (
        <View style={IndexStyles.StyleDeleteAccount.container}>
            <View style={IndexStyles.StyleDeleteAccount.viewheader}>
                <View style={IndexStyles.StyleDeleteAccount.headerTitle}>
                    <CustomHeader title='X√≥a t√†i kho·∫£n' color='red' />
                </View>
            </View>
            <View style={IndexStyles.StyleDeleteAccount.containerBody}>
                <View style={IndexStyles.StyleDeleteAccount.viewdeleteAccount}>
                    <Image source={Icon.DELETEACCOUNT} style={IndexStyles.StyleDeleteAccount.image} />
                    <View style={{ paddingHorizontal: 5 }}>
                        <Text style={IndexStyles.StyleDeleteAccount.textdelete}>
                            Th·∫≠t bu·ªìn khi bi·∫øt b·∫°n s·∫Øp r·ªùi kh·ªèi ƒë√¢y.
                            T·∫•t c·∫£ th√¥ng tin v√† ƒë·∫∑t h√†ng hay ƒë∆°n h√†ng c·ªßa b·∫£n k·ªÉ c·∫£
                            th√¥ng tin li√™n l·∫°c s·ªë ƒëi·ªán tho·∫°i, t√†i kho·∫£n ƒëƒÉng nh·∫≠p ƒë·ªÅu s·∫Ω b·ªã x√≥a.
                        </Text>
                        <Text style={IndexStyles.StyleDeleteAccount.textdelete}>
                            T√¥i mong b·∫°n ƒë√£ c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi t·∫°i ƒë√¢y sau khi s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.
                            V√† h√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n th·∫≠t s·ª± mu·ªën x√≥a t√†i kho·∫£n c·ªßa m√¨nh.
                        </Text>
                    </View>
                </View>
                <View style={IndexStyles.StyleDeleteAccount.viewcheckbox}>
                    <CustomCheckBox
                        title='X√°c nh·∫≠n x√≥a t√†i kho·∫£n'
                        checked={checked}
                        onPress={() => setChecked(!checked)}
                    />
                </View>
                <TouchableOpacity
                    style={[IndexStyles.StyleDeleteAccount.buttonConfirm, { opacity: checked ? 1 : 0.5 }]}
                    disabled={!checked} onPress={HandleDeleteAccount}>
                    <Text style={IndexStyles.StyleDeleteAccount.textbutton}>X√≥a t√†i kho·∫£n</Text>
                </TouchableOpacity>
            </View>
        </View>

    )
}

export default DeleteAccount  